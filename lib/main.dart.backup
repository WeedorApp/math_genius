import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:go_router/go_router.dart';

// Core modules
import 'core/barrel.dart';

// Feature imports
import 'features/game/barrel.dart';
import 'features/ai_tutor_agent/barrel.dart';
import 'features/family_system/barrel.dart';
import 'features/rewards/barrel.dart';
import 'features/live_session/barrel.dart';
import 'features/user_management/barrel.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Hive
  await Hive.initFlutter();

  // Initialize SharedPreferences
  final prefs = await SharedPreferences.getInstance();

  // Initialize device info
  final deviceInfo = DeviceInfoPlugin();

  // Initialize Hive box for privacy service
  final hiveBox = await Hive.openBox('privacy_data');

  runApp(
    ProviderScope(
      overrides: [
        // Override core service providers with initialized instances
        contextServiceProvider.overrideWithValue(
          ContextService(prefs, deviceInfo),
        ),
        themeServiceProvider.overrideWithValue(ThemeService(prefs)),
        languageServiceProvider.overrideWithValue(LanguageService(prefs)),
        privacyServiceProvider.overrideWithValue(
          PrivacyService(prefs, hiveBox),
        ),
        gameServiceProvider.overrideWithValue(GameService(prefs, hiveBox)),
        aiTutorServiceProvider.overrideWithValue(
          AITutorService(prefs, hiveBox),
        ),
        familyServiceProvider.overrideWithValue(FamilyService(prefs, hiveBox)),
        rewardServiceProvider.overrideWithValue(RewardService(prefs, hiveBox)),
        liveSessionServiceProvider.overrideWithValue(
          LiveSessionService(prefs, hiveBox),
        ),
        userManagementServiceProvider.overrideWithValue(
          UserManagementService(prefs, hiveBox),
        ),
        deviceLockServiceProvider.overrideWithValue(DeviceLockService(prefs)),
        analyticsServiceProvider.overrideWithValue(AnalyticsService(prefs)),
        sharingServiceProvider.overrideWithValue(SharingService(prefs)),
        notificationsServiceProvider.overrideWithValue(
          NotificationsService(prefs),
        ),
      ],
      child: const MathGeniusApp(),
    ),
  );
}

/// Main app widget for Math Genius Quantum Learning System
class MathGeniusApp extends ConsumerStatefulWidget {
  const MathGeniusApp({super.key});

  @override
  ConsumerState<MathGeniusApp> createState() => _MathGeniusAppState();
}

class _MathGeniusAppState extends ConsumerState<MathGeniusApp> {
  @override
  void initState() {
    super.initState();
    _initializeApp();
  }

  Future<void> _initializeApp() async {
    try {
      // Initialize context service
      final contextService = ref.read(contextServiceProvider);
      await contextService.initialize();

      // Initialize language service
      // final languageService = ref.read(languageServiceProvider);

      // Initialize privacy service
      // final privacyService = ref.read(privacyServiceProvider);

      if (mounted) {
        setState(() {});
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error initializing app: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final themeData = ref.watch(themeDataProvider);
    final currentLocale = ref.watch(currentLocaleProvider);
    // final textDirection = ref.watch(textDirectionProvider);

    return MaterialApp.router(
      title: 'Math Genius Quantum Learning System',
      debugShowCheckedModeBanner: false,

      // Theme configuration
      theme: themeData.toThemeData(),
      darkTheme: themeData.toThemeData(), // Same theme for now
      // Localization configuration
      locale: currentLocale,
      supportedLocales: const [
        Locale('en'), // English
        Locale('fr'), // French
        Locale('es'), // Spanish
        Locale('ar'), // Arabic
      ],
      localizationsDelegates: const [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      localeResolutionCallback: (locale, supportedLocales) {
        for (final supportedLocale in supportedLocales) {
          if (supportedLocale.languageCode == locale?.languageCode) {
            return supportedLocale;
          }
        }
        return const Locale('en');
      },

      // Text direction is handled by locale

      // Router configuration
      routerConfig: _createRouter(),

      // Error handling
      builder: (context, child) {
        return MediaQuery(
          data: MediaQuery.of(context).copyWith(
            textScaler: const TextScaler.linear(
              1.0,
            ), // Prevent text scaling issues
          ),
          child: child!,
        );
      },
    );
  }

  /// Create the app router
  GoRouter _createRouter() {
    return GoRouter(
      initialLocation: '/',
      routes: [
        GoRoute(path: '/', builder: (context, state) => const SplashScreen()),
        GoRoute(path: '/home', builder: (context, state) => const HomeScreen()),
        GoRoute(path: '/game', builder: (context, state) => const GameScreen()),
        GoRoute(
          path: '/tutor',
          builder: (context, state) =>
              const TutorPanelScreen(studentId: 'demo_student', grade: 5),
        ),
        GoRoute(
          path: '/family',
          builder: (context, state) => const FamilyManagementScreen(),
        ),
        GoRoute(
          path: '/login',
          builder: (context, state) => const FamilyLoginScreen(),
        ),
        GoRoute(
          path: '/rewards',
          builder: (context, state) =>
              const RewardShelfWidget(userId: 'demo_user'),
        ),
        GoRoute(
          path: '/live-session',
          builder: (context, state) => const LiveSessionHostingWidget(
            hostId: 'demo_teacher',
            hostName: 'Mrs. Johnson',
          ),
        ),
        GoRoute(path: '/auth', builder: (context, state) => const AuthWidget()),
        GoRoute(
          path: '/login',
          builder: (context, state) => const LoginScreen(),
        ),
        GoRoute(
          path: '/register',
          builder: (context, state) => const RegisterScreen(),
        ),
        GoRoute(
          path: '/settings',
          builder: (context, state) => const SettingsScreen(),
        ),
      ],
    );
  }
}

/// Splash screen widget
class SplashScreen extends ConsumerStatefulWidget {
  const SplashScreen({super.key});

  @override
  ConsumerState<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends ConsumerState<SplashScreen> {
  @override
  void initState() {
    super.initState();
    _navigateToHome();
  }

  Future<void> _navigateToHome() async {
    // Wait for 3 seconds to show splash screen
    await Future.delayed(const Duration(seconds: 3));

    if (mounted) {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).colorScheme.surface,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // App logo/icon
            Icon(
              Icons.school,
              size: 80,
              color: Theme.of(context).colorScheme.primary,
            ),
            const SizedBox(height: 24),

            // App title
            Text(
              'Math Genius',
              style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                fontWeight: FontWeight.bold,
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),

            // Subtitle
            Text(
              'Quantum Learning System',
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                color: Theme.of(
                  context,
                ).colorScheme.onSurface.withValues(alpha: 0.7),
              ),
            ),
            const SizedBox(height: 48),

            // Loading indicator
            CircularProgressIndicator(
              color: Theme.of(context).colorScheme.primary,
            ),
            const SizedBox(height: 24),

            // Version info
            Text(
              'SSOT v1.0.0',
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Theme.of(
                  context,
                ).colorScheme.onSurface.withValues(alpha: 0.5),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// Home screen widget (placeholder)
class HomeScreen extends ConsumerWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final themeData = ref.watch(themeDataProvider);
    final colorScheme = themeData.colorScheme.toColorScheme();

    return Scaffold(
      backgroundColor: colorScheme.surface,
      appBar: AppBar(
        backgroundColor: colorScheme.surface,
        foregroundColor: colorScheme.onSurface,
        title: Text(
          'Math Genius',
          style: themeData.typography.headlineSmall.copyWith(
            color: colorScheme.onSurface,
          ),
        ),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const SizedBox(height: 20),
            Icon(Icons.school, size: 80, color: colorScheme.primary),
            const SizedBox(height: 24),
            Text(
              'Welcome to Math Genius',
              style: themeData.typography.headlineMedium.copyWith(
                color: colorScheme.onSurface,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            Text(
              'Quantum Learning System',
              style: themeData.typography.bodyLarge.copyWith(
                color: colorScheme.onSurfaceVariant,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 32),
              ElevatedButton(
                onPressed: () {
                  context.go('/game');
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: colorScheme.primary,
                  foregroundColor: colorScheme.onPrimary,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 32,
                    vertical: 16,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(
                  'Start Math Quiz',
                  style: themeData.typography.labelLarge.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  context.go('/tutor');
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: colorScheme.secondary,
                  foregroundColor: colorScheme.onSecondary,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 32,
                    vertical: 16,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(
                  'AI Math Tutor',
                  style: themeData.typography.labelLarge.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  context.go('/family');
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: colorScheme.tertiary,
                  foregroundColor: colorScheme.onTertiary,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 32,
                    vertical: 16,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(
                  'Family Management',
                  style: themeData.typography.labelLarge.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  context.go('/rewards');
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: colorScheme.error,
                  foregroundColor: colorScheme.onError,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 32,
                    vertical: 16,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(
                  'Rewards & Achievements',
                  style: themeData.typography.labelLarge.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  context.go('/live-session');
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: colorScheme.primaryContainer,
                  foregroundColor: colorScheme.onPrimaryContainer,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 32,
                    vertical: 16,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(
                  'Live Session Hosting',
                  style: themeData.typography.labelLarge.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  context.go('/auth');
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: colorScheme.secondaryContainer,
                  foregroundColor: colorScheme.onSecondaryContainer,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 32,
                    vertical: 16,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(
                  'Authentication & Account',
                  style: themeData.typography.labelLarge.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              const SizedBox(height: 20), // Bottom padding for scroll
            ],
          ),
        ),
      ),
    );
  }
}

/// Login screen widget (placeholder)
class LoginScreen extends ConsumerWidget {
  const LoginScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(title: const Text('Login')),
      body: const Center(child: Text('Login Screen - Coming Soon')),
    );
  }
}

/// Register screen widget (placeholder)
class RegisterScreen extends ConsumerWidget {
  const RegisterScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(title: const Text('Register')),
      body: const Center(child: Text('Register Screen - Coming Soon')),
    );
  }
}

/// Settings screen widget (placeholder)
class SettingsScreen extends ConsumerWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(title: const Text('Settings')),
      body: const Center(child: Text('Settings Screen - Coming Soon')),
    );
  }
}
