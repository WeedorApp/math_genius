name: Math Genius CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  # Code Quality and Testing
  quality_assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze code
      run: flutter analyze
      
    - name: Run unit tests
      run: flutter test test/unit_tests/ --coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        
    - name: Run integration tests
      run: flutter test test/integration_test.dart

  # Android Build and Test
  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: quality_assurance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build APK
      run: flutter build apk --release --split-per-abi
      
    - name: Build App Bundle
      run: flutter build appbundle --release
      
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/*.apk
        
    - name: Upload AAB artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-aab
        path: build/app/outputs/bundle/release/app-release.aab

  # iOS Build and Test
  build_ios:
    name: Build iOS
    runs-on: macos-latest
    needs: quality_assurance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build iOS (no codesign)
      run: flutter build ios --release --no-codesign
      
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-app
        path: build/ios/iphoneos/Runner.app

  # Web Build and Deploy
  build_web:
    name: Build and Deploy Web
    runs-on: ubuntu-latest
    needs: quality_assurance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Web
      run: flutter build web --release --web-renderer canvaskit
      
    - name: Upload Web artifacts
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: build/web/
        
    # Deploy to GitHub Pages (optional)
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/web

  # macOS Build
  build_macos:
    name: Build macOS
    runs-on: macos-latest
    needs: quality_assurance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build macOS
      run: flutter build macos --release
      
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos-app
        path: build/macos/Build/Products/Release/math_genius.app

  # Windows Build
  build_windows:
    name: Build Windows
    runs-on: windows-latest
    needs: quality_assurance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Windows
      run: flutter build windows --release
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-build
        path: build/windows/runner/Release/

  # Linux Build
  build_linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: quality_assurance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Install Linux dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Linux
      run: flutter build linux --release
      
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux-build
        path: build/linux/x64/release/bundle/

  # Security Scanning
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality_assurance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance_test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build_web
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Download web build
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: build/web/
        
    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Release Creation
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build_android, build_ios, build_web, build_macos, build_windows, build_linux]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release packages
      run: |
        # Create Android package
        zip -r android-release.zip android-apk/ android-aab/
        
        # Create iOS package
        zip -r ios-release.zip ios-app/
        
        # Create Web package
        tar -czf web-release.tar.gz web-build/
        
        # Create macOS package
        zip -r macos-release.zip macos-app/
        
        # Create Windows package
        zip -r windows-release.zip windows-build/
        
        # Create Linux package
        tar -czf linux-release.tar.gz linux-build/
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          android-release.zip
          ios-release.zip
          web-release.tar.gz
          macos-release.zip
          windows-release.zip
          linux-release.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment to Production
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build_android, build_ios, build_web, build_macos, build_windows, build_linux]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download web build
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: build/web/
        
    - name: Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        channelId: live
        projectId: math-genius-prod
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üöÄ Math Genius v${{ github.ref_name }} deployed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Notification on Failure
  notify_failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [quality_assurance, build_android, build_ios, build_web, build_macos, build_windows, build_linux]
    
    steps:
    - name: Notify failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå Math Genius CI/CD pipeline failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
